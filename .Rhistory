d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(inputId = "votes", min = 1, max = )
)
maxvotes
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA") |>
arrange(votes)
d01
maxvotes <- max(d01$votes)
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA") |>
arrange(desc(votes))
d01
maxvotes <- max(d01$votes)
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(inputId = "votes", min = minvotes, max = maxvotes, value = minvotes)
)
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(label = "Choose the number of votes recieved", inputId = "votes", min = minvotes, max = maxvotes, value = minvotes)
)
d01
server <- function(input, output){
}
?Lahman::HallOfFame
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(label = "Choose the number of votes recieved", inputId = "votes", min = minvotes, max = maxvotes, value = minvotes),
tableOutput(outputId = "table")
)
server <- function(input, output){
output$table <- renderTable(d01)
}
?Lahman::HallOfFame
shinyApp(ui, server)
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(label = "Choose the number of votes recieved", inputId = "votes", min = minvotes, max = maxvotes, value = minvotes),
tableOutput(outputId = "table")
)
server <- function(input, output){
output$table <- renderTable({
d02 <- d01[,1]
d02
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(label = "Choose the number of votes recieved", inputId = "votes", min = minvotes, max = maxvotes, value = minvotes),
tableOutput(outputId = "table")
)
server <- function(input, output){
output$table <- renderTable({
d02 <- d01[,1:3]
d02
})
}
shinyApp(ui, server)
d01
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(label = "Choose the number of votes recieved", inputId = "votes", min = minvotes, max = maxvotes, value = minvotes),
tableOutput(outputId = "table")
)
server <- function(input, output){
output$table <- renderTable({
d02 <- d01 |>
filter(votes == input$votes)
d02
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(label = "Choose the number of votes recieved", inputId = "votes", min = minvotes, max = maxvotes, value = minvotes),
tableOutput(outputId = "table")
)
server <- function(input, output){
output$table <- renderTable({
d02 <- d01 |>
filter(votes == input$votes) |>
select(c(playerID, needed, ballots))
d02
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(label = "Choose the number of votes recieved", inputId = "votes", min = minvotes, max = maxvotes, value = minvotes),
tableOutput(outputId = "table")
)
server <- function(input, output){
output$table <- renderTable({
d02 <- d01 |>
filter(votes == input$votes) |>
select(c(playerID, needed, ballots)) |>
mutate(votesNot = needed-ballots)
d02
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(label = "Choose the number of votes recieved", inputId = "votes", min = minvotes, max = maxvotes, value = minvotes),
tableOutput(outputId = "table")
)
server <- function(input, output){
output$table <- renderTable({
d02 <- d01 |>
filter(votes == input$votes) |>
select(c(playerID, needed, ballots)) |>
mutate(votesNot = ballots-needed)
d02
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(label = "Choose the number of votes recieved", inputId = "votes", min = minvotes, max = maxvotes, value = minvotes),
tableOutput(outputId = "table")
)
server <- function(input, output){
output$table <- renderTable({
d02 <- d01 |>
filter(votes == input$votes) |>
select(c(playerID, needed, ballots)) |>
mutate(votesNot = ballots-needed)
d02
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(label = "Choose the number of votes recieved", inputId = "votes", min = minvotes, max = maxvotes, value = minvotes),
tableOutput(outputId = "table")
)
server <- function(input, output){
output$table <- renderTable({
d02 <- d01 |>
filter(votes == input$votes) |>
select(c(playerID, needed, ballots)) |>
mutate(votesNot = ballots-input$votes)
d02
})
}
shinyApp(ui, server)
?geom_bar
geom_bar(horiz = TRUE)
geom_col(horiz = TRUE)
?geom_col
library(ggplot2)
geom_bar(horiz = FASLE)
geom_bar(horiz = FALSE)
prob01 <- FALSE
prob02 <- FALSE
prob03 <- "b"
prob04 <- c("a", "c", "d")
prob05 <- c("a", "b", "c", "d")
prob06 <- FALSE
prob07 <- FALSE
prob08 <- FALSE
prob09 <- "AUTHORIZED PRIVATE IDENTIFICATION"
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(label = "Choose the number of votes recieved", inputId = "votes", min = minvotes, max = maxvotes, value = minvotes),
tableOutput(outputId = "table")
)
server <- function(input, output){
output$table <- renderTable({
d02 <- d01 |>
filter(votes == input$votes) |>
select(c(playerID, needed, ballots)) |>
mutate(votesNot = ballots-input$votes)
d02
})
}
shinyApp(ui, server)
prob01 <- FALSE
prob02 <- FALSE
prob03 <- "b"
prob04 <- c("a", "c", "d")
prob05 <- c("a", "b", "c", "d")
prob06 <- FALSE
prob07 <- FALSE
prob08 <- FALSE
prob09 <- "AUTHORIZED PRIVATE IDENTIFICATION"
library(tidyverse)
library(shiny)
d0 <- Lahman::HallOfFame
d01 <- d0|>
filter(category == "Player", votedBy == "BBWAA")
d01
minvotes <- min(d01$votes)
maxvotes <- max(d01$votes)
ui <- fluidPage(
sliderInput(label = "Choose the number of votes recieved", inputId = "votes", min = minvotes, max = maxvotes, value = minvotes),
tableOutput(outputId = "table")
)
server <- function(input, output){
output$table <- renderTable({
d02 <- d01 |>
filter(votes == input$votes) |>
select(c(playerID, needed, ballots)) |>
mutate(votesNot = ballots-input$votes)
d02
})
}
shinyApp(ui, server)
library(shiny); runApp('C:/Users/User/Desktop/fa23_stat440_chixiao2_vvf2/finalApp.R')
setwd("C:/Users/User/Desktop/fa23_stat440_chixiao2_vvf2")
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
final_data
final_data <- read_csv("topSongsLyrics1950_2019.csv")
final_data
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
final_data
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
final_data <- read_csv("https://file.io/tqyuQi2bTc8P")
final_data
final_data <- read_csv("https://file.io/tqyuQi2bTc8P")
final_data
final_data <- read_csv("https://uofi.box.com/s/5yv1y1axibe4dyo2t5yj8j7926gx96nd")
final_data
final_data <- read_csv("https://raw.githubusercontent.com/ValDevelopment/musicData/main/topSongsLyrics1950_2019.csv")
final_data
runApp('finalApp.R')
final_data <- read_csv("https://raw.githubusercontent.com/ValDevelopment/musicData/main/topSongsLyrics1950_2019.csv")
final_data
final_data <- read_csv("https://raw.githubusercontent.com/ValDevelopment/musicData/main/topSongsLyrics1950_2019.csv")
final_data
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
final_data <- read_csv("https://raw.githubusercontent.com/ValDevelopment/musicData/main/topSongsLyrics1950_2019.csv")
final_data
ui <- fluidPage(
tabsetPanel(
tabPanel("App Overview",
textOutput("introText")
),
tabPanel("Search by Year",
selectInput("yearSelect", "Select Year", choices = unique(final_data$year)),
radioButtons("lyrics", "Display Lyrics?:",
c("No" = "hide",
"Yes" = "show")),
actionButton("year", "Submit"),
tableOutput("yearTable")
),
tabPanel("Search by Artist",
selectInput("artistSelect", "Select Artist", choices = unique(final_data$artist)),
radioButtons("lyricsArt", "Display Lyrics?:",
c("No" = "hide",
"Yes" = "show")),
actionButton("artist", "Submit"),
tableOutput("artistTable")
),
tabPanel("Artist Infographics",
actionButton("clicks", "Submit"),
tableOutput("artistInfo")
),
tabPanel("Artist Rank Distribution",
actionButton("clicks", "Submit"),
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$introText <- renderText("App Information")
yearEvent <- eventReactive(input$year ,{
include <- switch(input$lyrics,
hide = c(1, 5),
show = c(1), c(1, 5))
year <- final_data|>
filter(year == input$yearSelect) |>
select(-include)
year
})
artistEvent <- eventReactive(input$artist ,{
include <- switch(input$lyricsArt,
hide = c(1, 5),
show = c(1), c(1, 5))
artist <- final_data|>
filter(artist == input$artistSelect) |>
select(-include)
artist
})
output$yearTable <- renderTable({
yearEvent()
})
output$artistTable <- renderTable({
artistEvent()
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('finalApp.R')
runApp('finalApp.R')
info
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
View(final_data)
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
?geom_bar
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
runApp('finalApp.R')
